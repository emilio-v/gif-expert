{"version":3,"sources":["theme/GlobalStyles.tsx","theme/colors.ts","theme/Themes.ts","components/IconsFadeEffect.tsx","theme/Toggle.tsx","components/AddCategory.tsx","components/GifGridItem.tsx","helpers/capitalize.ts","helpers/getGifs.ts","components/GifGrid.tsx","hooks/useFetchGifs.ts","components/GifExpert.tsx","App.tsx","hooks/useThemeToggler.ts","reportWebVitals.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","theme","background","text","colors","white","black","dark","blueDark","grayishBlue","lightTheme","iconColor","iconBackground","darkTheme","Container","styled","div","StyledIconn","props","active","IconsFadeEffect","initialIcon","secondIcon","firstIconActive","as","Button","button","Toggle","toggleTheme","onClick","Moon","Sun","AddCategory","setCategories","useState","newCategory","setNewCategory","onSubmit","e","preventDefault","trim","length","categories","type","onChange","value","target","Card","Image","img","Title","p","GifGridItem","id","title","url","className","src","alt","charAt","toUpperCase","slice","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","gif","images","downsized_medium","CardGrid","GifGrid","loading","state","setState","useEffect","then","console","log","useFetchGifs","GifExpert","idx","App","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","localTheme","getItem","useThemeToggler","themeToggler","themeMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.376cb38a.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\ninterface ThemeProps {\r\n    background: string;\r\n    text: string;\r\n}\r\n\r\ninterface GlobalThemeProps {\r\n    theme: ThemeProps;\r\n}\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    body {\r\n        background: ${({ theme }: GlobalThemeProps) => theme.background};\r\n        color: ${({ theme }: GlobalThemeProps) => theme.text};\r\n        font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\r\n        transition: all 0.50s linear;\r\n        margin: 0;\r\n        padding: 30px;\r\n    };\r\n    button {\r\n        margin: 0;\r\n        padding: 0;\r\n        border: none\r\n    };\r\n    hr {\r\n        background: ${({ theme }: GlobalThemeProps) => theme.text};\r\n    };\r\n    ol {\r\n        padding-left: 20px;\r\n        padding-right: 20px;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","const colors = {\r\n    white: '#FFFF',\r\n    black: '#000000',\r\n    dark: '#21232a',\r\n    blueDark: '#282c34',\r\n    grayishBlue: '#303846',\r\n};\r\n\r\nexport default colors;\r\n","import colors from './colors';\r\n\r\nexport const lightTheme = {\r\n    background: colors.white,\r\n    text: colors.black,\r\n    iconColor: colors.white,\r\n    iconBackground: colors.grayishBlue,\r\n};\r\n\r\nexport const darkTheme = {\r\n    background: colors.dark,\r\n    text: colors.white,\r\n    iconColor: colors.white,\r\n    iconBackground: colors.grayishBlue,\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { StyledIcon } from '@styled-icons/styled-icon';\r\n\r\ninterface IconsFadeEffectProps {\r\n    initialIcon: StyledIcon;\r\n    secondIcon: StyledIcon;\r\n    firstIconActive: boolean;\r\n}\r\n\r\ninterface StyledIconProp {\r\n    active: boolean;\r\n}\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n`;\r\n\r\nconst StyledIconn = styled.div<StyledIconProp>`\r\n    opacity: ${props => (props.active ? 1 : 0)};\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    margin: auto;\r\n    z-index: ${props => (props.active ? 1 : 0)};\r\n    transition: all 300ms ease-in-out; ;\r\n`;\r\n\r\nconst IconsFadeEffect: React.FC<IconsFadeEffectProps> = ({\r\n    initialIcon,\r\n    secondIcon,\r\n    firstIconActive,\r\n}) => {\r\n    return (\r\n        <Container>\r\n            <StyledIconn as={initialIcon} active={firstIconActive} />\r\n            <StyledIconn as={secondIcon} active={!firstIconActive} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default IconsFadeEffect;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Moon } from '@styled-icons/boxicons-solid/Moon';\r\nimport { Sun } from '@styled-icons/boxicons-solid/Sun';\r\n\r\nimport IconsFadeEffect from '../components/IconsFadeEffect';\r\n\r\ninterface ToggleProps {\r\n    theme: 'light' | 'dark';\r\n    toggleTheme: () => void;\r\n}\r\n\r\nconst Button = styled.button`\r\n    background: ${({ theme }) => theme.iconBackground};\r\n    color: ${({ theme }) => theme.iconColor};\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    padding: 8px;\r\n    width: 40px;\r\n    height: 40px;\r\n    position: fixed;\r\n    bottom: 25px;\r\n    right: 25px;\r\n`;\r\n\r\nconst Toggle: React.FC<ToggleProps> = ({ theme, toggleTheme }) => {\r\n    return (\r\n        <Button onClick={toggleTheme}>\r\n            <IconsFadeEffect\r\n                initialIcon={Moon}\r\n                secondIcon={Sun}\r\n                firstIconActive={theme === 'light'}\r\n            />\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default Toggle;\r\n","import React, { useState, FormEvent } from 'react';\r\n\r\ninterface AddCategoryProps {\r\n    setCategories: React.Dispatch<React.SetStateAction<string[]>>;\r\n}\r\n\r\nconst AddCategory: React.FC<AddCategoryProps> = ({ setCategories }) => {\r\n    const [newCategory, setNewCategory] = useState<string>('');\r\n\r\n    const onChange = (value: string) => {\r\n        setNewCategory(value);\r\n    };\r\n\r\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (newCategory.trim().length > 2) {\r\n            setCategories(categories => [newCategory, ...categories]);\r\n            setNewCategory('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                onChange={({ target }) => {\r\n                    onChange(target.value);\r\n                }}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport colors from '../theme/colors';\r\nimport { capitalize } from '../helpers/capitalize';\r\n\r\ninterface GifGridItemProps {\r\n    id: string;\r\n    title: string;\r\n    url: string;\r\n}\r\n\r\nconst Card = styled.div`\r\n    align-items: center;\r\n    border: 1px solid ${colors.grayishBlue};\r\n    border-radius: 6px;\r\n    margin-bottom: 10px;\r\n    margin-right: 10px;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst Image = styled.img`\r\n    max-height: 170px;\r\n`;\r\nconst Title = styled.p`\r\n    padding: 5px;\r\n    text-align: center;\r\n`;\r\n\r\nconst GifGridItem: React.FC<GifGridItemProps> = ({ id, title, url }) => {\r\n    return (\r\n        <Card className=\"animate__animated animate__rubberBand\">\r\n            <Image src={url} alt={title} />\r\n            <Title>{capitalize(title)}</Title>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const capitalize = (text: string) => {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n};\r\n","interface GifProps {\r\n    id: string;\r\n    title: string;\r\n    url: string;\r\n}\r\n\r\nconst getGifs = async (category: string): Promise<GifProps[]> => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n        category\r\n    )}&limit=10&api_key=UjM3hWDYdlCy3GmLfh9PSj5bA3gadGis`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((gif: any) => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.downsized_medium.url,\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};\r\n\r\nexport default getGifs;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\ninterface GifGridProps {\r\n    category: string;\r\n}\r\n\r\n// interface GifProps {\r\n//     id: string;\r\n//     title: string;\r\n//     url: string;\r\n// }\r\n\r\nconst CardGrid = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst GifGrid: React.FC<GifGridProps> = ({ category }) => {\r\n    const { data, loading } = useFetchGifs({ category });\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__rubberBand\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <CardGrid>\r\n                {data.map(img => (\r\n                    <GifGridItem key={img.id} {...img} />\r\n                ))}\r\n            </CardGrid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from 'react';\r\nimport getGifs from '../helpers/getGifs';\r\n\r\ninterface GifProps {\r\n    id: string;\r\n    title: string;\r\n    url: string;\r\n}\r\n\r\ninterface StateProps {\r\n    data: GifProps[];\r\n    loading: boolean;\r\n}\r\n\r\nexport const useFetchGifs = ({ category }: { category: string }): StateProps => {\r\n    const [state, setState] = useState<StateProps>({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState({ ...state, loading: true });\r\n        getGifs(category).then(gifs => {\r\n            console.log(gifs);\r\n            setState({ data: gifs, loading: false });\r\n        });\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst GifExpert: React.FC = () => {\r\n    const initialCategories = ['Rick and Morty'];\r\n\r\n    const [categories, setCategories] = useState<string[]>(initialCategories);\r\n\r\n    return (\r\n        <>\r\n            <h1>Gif Expert App</h1>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {categories.map((category, idx) => {\r\n                    return <GifGrid key={`${category}-${idx}`} category={category} />;\r\n                })}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpert;\r\n","import React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport GlobalStyles from './theme/GlobalStyles';\r\nimport { lightTheme, darkTheme } from './theme/Themes';\r\nimport { useThemeToggler } from './hooks/useThemeToggler';\r\n\r\nimport Toggle from './theme/Toggle';\r\nimport GifExpert from './components/GifExpert';\r\n\r\ninterface AppProps {}\r\n\r\nconst App: React.FC<AppProps> = () => {\r\n    const [theme, themeToggler, mountedComponent] = useThemeToggler();\r\n\r\n    const themeMode = theme === 'light' ? lightTheme : darkTheme;\r\n\r\n    if (!mountedComponent) return <div />;\r\n\r\n    return (\r\n        <ThemeProvider theme={themeMode}>\r\n            <>\r\n                <GlobalStyles />\r\n                <GifExpert />\r\n                <Toggle theme={theme} toggleTheme={themeToggler} />\r\n            </>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { useState, useEffect } from 'react';\r\n\r\ntype CurrentTheme = 'light' | 'dark';\r\n\r\nexport const useThemeToggler = (): [CurrentTheme, () => void, boolean] => {\r\n    const [theme, setTheme] = useState<CurrentTheme>('light');\r\n    const [mountedComponent, setMountedComponent] = useState<boolean>(false);\r\n\r\n    const setMode = (mode: CurrentTheme) => {\r\n        window.localStorage.setItem('theme', mode);\r\n        setTheme(mode);\r\n    };\r\n\r\n    const themeToggler = () => {\r\n        theme === 'light' ? setMode('dark') : setMode('light');\r\n    };\r\n\r\n    useEffect(() => {\r\n        const localTheme = window.localStorage.getItem('theme');\r\n        localTheme && setTheme(localTheme as CurrentTheme);\r\n        setMountedComponent(true);\r\n    }, []);\r\n\r\n    return [theme, themeToggler, mountedComponent];\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}